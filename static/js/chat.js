/* eslint-env browser */
import {resolveRelativeWeekday,parseAbsDate,resolveRelativeWeek,parseExplicitRange}
  from "./date_utils.js";
import { initialGreeting } from "./utils/greeting.js";
import {extractSchedulingInfo, getMissingFieldsText, requiredFields} from "./scheduling_utils.js";

const pane    = document.getElementById("chat-pane");
const input   = document.getElementById("chat-input");
const sendBtn = document.getElementById("send-btn");
const debugBtn= document.getElementById("debug-btn");

const USER = JSON.parse(document.getElementById("django-context").textContent);  // vezi ¬ß7.4

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ mici utilitare HTMX ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function addBubble(message, who="ai", quick=[]){
  htmx.ajax("POST", "/bubble/", {
    values:{message, who, quick:JSON.stringify(quick)},
    target:"#chat-pane",
    swap:"beforeend"
  });
  pane.scrollTop = pane.scrollHeight;
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ greeting ini≈£ial ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
document.addEventListener("DOMContentLoaded", ()=>{
  console.log("ar trebui sa intru aici ")
  addBubble(initialGreeting());     // << √Ænlocuie»ôte textul fix
});


/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ handler send ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
sendBtn.addEventListener("click", async () => {
  const text = input.value.trim();
  if (!text) return;

  /* 1Ô∏è‚É£  afi≈üƒÉm imediat bula utilizatorului */
  addBubble(text, "user");
  input.value = "";

  /* 2Ô∏è‚É£  verificƒÉm ce informa≈£ii lipsesc */
  const partial = extractSchedulingInfo(text);
  const missing = requiredFields.filter(f => !partial[f]);
  console.log(partial)
  console.log(missing)
  if (missing.length) {
    /* nu trimitem nimic la backend ‚Äì cerem detaliile lipsƒÉ */
    addBubble(getMissingFieldsText(missing));
    return;                // ie≈üim din handler
  }

  /* 3Ô∏è‚É£  indicator ‚Äútyping‚Ä¶‚Äù (op≈£ional) ----------------------------- */
  const ws = new WebSocket(`ws://${location.host}/ws/typing/`);
  ws.onopen = () => ws.send(JSON.stringify({ typing: true }));

  /* 4Ô∏è‚É£  parsƒÉm rapid date absolut / relativ ------------------------ */
  const iso =
    parseAbsDate(text) ||
    resolveRelativeWeekday(text) ||
    (parseExplicitRange(text) || [])[0] ||
    (resolveRelativeWeek(text)    || [])[0];

  /* 5Ô∏è‚É£  chemƒÉm FastAPI -------------------------------------------- */
  /* 5Ô∏è‚É£  chemƒÉm FastAPI -------------------------------------------- */
const body = {
  message: text,
  currentUserEmail: USER.email || "",    // <- adaugƒÉ acest c√¢mp!
  currentUserName:  USER.name,
  UserId:           USER.id
};

  let data;
try {
  const response = await fetch("http://localhost:8001/predict", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body)
  });

  /* (a) ¬≠verificƒÉm codul HTTP --------------------------- */
  if (!response.ok) {                     // 4xx / 5xx / 422 ‚Ä¶
    throw new Error(`server returned ${response.status}`);
  }

  /* (b) ¬≠parsƒÉm JSON-ul -------------------------------- */
  data = await response.json();           // (!) nu .then √Æn lan≈£

} catch (err) {
  console.error("fetch /predict failed:", err);
  addBubble("‚ö†Ô∏è Assistant unavailable. Please try again later.");
  return;
}

/* 2Ô∏è‚É£  aici AI deja rƒÉspunsul √Æn `data`  ------------------ */
console.log("FastAPI ‚Üí", data);           // vezi tot JSON-ul

/* De exemplu‚Ä¶ */
if (data.intent) {
  addBubble(`ü§ñ intent: <b>${data.intent}</b>`);
} else if (data.detail) {                 // eroare de validare 422
  addBubble(`‚ùå ${data.detail}`);
} else {
  addBubble("ü§î I didn't understand that.");
}

});


/* Enter = click Send */
input.addEventListener("keydown", e=>{
  if(e.key==="Enter") sendBtn.click();
});
